admin:
  access_log_path: /dev/null
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 7233 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/" }
                          route:
                            #                            cluster: temporal_service
                            timeout: 0s
                            max_stream_duration:
                              grpc_timeout_header_max: 0s
                            weighted_clusters:
                              clusters:
                                - name: temporal_service
                                  weight: 1
                                - name: temporal_service2
                                  weight: 1
                      cors:
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                        max_age: "1728000"
                        expose_headers: grpc-status,grpc-message
                http_filters:
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      typed_json_format:
                        "@timestamp": "%START_TIME%"
                        client:
                          address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                          certificate:
                            local:
                              subject: "%DOWNSTREAM_LOCAL_SUBJECT%"
                              uri_san: "%DOWNSTREAM_LOCAL_URI_SAN%"
                            peer:
                              cert_v_end: "%DOWNSTREAM_PEER_CERT_V_END%"
                              cert_v_start: "%DOWNSTREAM_PEER_CERT_V_START%"
                              certificate: "%DOWNSTREAM_PEER_CERT%"
                              issuer: "%DOWNSTREAM_PEER_ISSUER%"
                              serial: "%DOWNSTREAM_PEER_SERIAL%"
                              uri_san: "%DOWNSTREAM_PEER_URI_SAN%"
                          direct:
                            remote:
                              address: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%"
                          local:
                            address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                          remote:
                            address_no_port: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
                          sni: "%REQUESTED_SERVER_NAME%"
                          tls:
                            cipher: "%DOWNSTREAM_TLS_CIPHER%"
                            session_id: "%DOWNSTREAM_TLS_SESSION_ID%"
                            version: "%DOWNSTREAM_TLS_VERSION%"
                        envoy:
                          route:
                            name: "%ROUTE_NAME%"
                          upstream:
                            cluster: "%UPSTREAM_CLUSTER%"
                            localaddress: "%UPSTREAM_LOCAL_ADDRESS%"
                            transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                        host:
                          hostname: "%HOSTNAME%"
                        http:
                          request:
                            body:
                              bytes: "%BYTES_RECEIVED%"
                            duration: "%DURATION%"
                            duration_req: "%REQUEST_DURATION%"
                            headers:
                              accept: "%REQ(ACCEPT)%"
                              authority: "%REQ(:AUTHORITY)%"
                              content-length: "%REQ(CONTENT-LENGTH)%"
                              content-type: "%REQ(CONTENT-TYPE)%"
                              host: "%REQ(HOST)%"
                              id: "%REQ(X-REQUEST-ID)%"
                              session-id: "%REQ(SESSION-ID)%"
                              correlation-id: "%REQ(CORRELATION-ID)%"
                              x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                              x_forwarded_proto: "%REQ(X-FORWARDED-PROTO)%"
                              x_envoy_internal: "%REQ(X-ENVOY-INTERNAL)%"
                              x_envoy_decorator_operation: "%REQ(X-ENVOY-DECORATOR-OPERATION)%"
                              x_envoy_expected_rq_timeout_ms: "%REQ(X-ENVOY-EXPECTED-RQ-TIMEOUT-MS)%"
                              x_b3_traceid: "%REQ(X-B3-TRACEID)%"
                              x_b3_parentspanid: "%REQ(X-B3-PARENTSPANID)%"
                              x_b3_spanid: "%REQ(X-B3-SPANID)%"
                              x_b3_sampled: "%REQ(X-B3-SAMPLED)%"
                            method: "%REQ(:METHOD)%"
                            path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          response:
                            body:
                              bytes: "%BYTES_SENT%"
                            duration_resp: "%RESPONSE_DURATION%"
                            duration_tx: "%RESPONSE_TX_DURATION%"
                            flags: "%RESPONSE_FLAGS%"
                            headers:
                              access-control-allow-origin: "%RESP(ACCESS-CONTROL-ALLOW-ORIGIN)%"
                              content-length: "%RESP(CONTENT-LENGTH)%"
                              content-type: "%RESP(CONTENT-TYPE)%"
                              date: "%RESP(DATE)%"
                              server: "%RESP(SERVER)%"
                            status_code: "%RESPONSE_CODE%"
                            status_code_details: "%RESPONSE_CODE_DETAILS%"
                          version: "%PROTOCOL%"
                        log:
                          level: "info"  # default envoy log level
                        network:
                          direction: "inbound"
                        server:
                          address: "%UPSTREAM_HOST%"
                        service:
                          name: "envoy"
                          version: "dev-706fe7871ab5fe631406db1e0fe5af1c4d0eb1b8"
                        user_agent.name: "%REQ(USER-AGENT)%"
    - name: listener_1
      address:
        socket_address: { address: 0.0.0.0, port_value: 7243 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http2
                route_config:
                  name: local_route2
                  virtual_hosts:
                    - name: local_service2
                      domains: [ "*" ]
                      routes:
                        - match: { prefix: "/" }
                          route:
                            weighted_clusters:
                              clusters:
                                - name: temporal_service3
                                  weight: 1
                http_filters:
                  - name: envoy.filters.http.router2
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      typed_json_format:
                        "@timestamp": "%START_TIME%"
                        client:
                          address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                          certificate:
                            local:
                              subject: "%DOWNSTREAM_LOCAL_SUBJECT%"
                              uri_san: "%DOWNSTREAM_LOCAL_URI_SAN%"
                            peer:
                              cert_v_end: "%DOWNSTREAM_PEER_CERT_V_END%"
                              cert_v_start: "%DOWNSTREAM_PEER_CERT_V_START%"
                              certificate: "%DOWNSTREAM_PEER_CERT%"
                              issuer: "%DOWNSTREAM_PEER_ISSUER%"
                              serial: "%DOWNSTREAM_PEER_SERIAL%"
                              uri_san: "%DOWNSTREAM_PEER_URI_SAN%"
                          direct:
                            remote:
                              address: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%"
                          local:
                            address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                          remote:
                            address_no_port: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
                          sni: "%REQUESTED_SERVER_NAME%"
                          tls:
                            cipher: "%DOWNSTREAM_TLS_CIPHER%"
                            session_id: "%DOWNSTREAM_TLS_SESSION_ID%"
                            version: "%DOWNSTREAM_TLS_VERSION%"
                        envoy:
                          route:
                            name: "%ROUTE_NAME%"
                          upstream:
                            cluster: "%UPSTREAM_CLUSTER%"
                            localaddress: "%UPSTREAM_LOCAL_ADDRESS%"
                            transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                        host:
                          hostname: "%HOSTNAME%"
                        http:
                          request:
                            body:
                              bytes: "%BYTES_RECEIVED%"
                            duration: "%DURATION%"
                            duration_req: "%REQUEST_DURATION%"
                            headers:
                              accept: "%REQ(ACCEPT)%"
                              authority: "%REQ(:AUTHORITY)%"
                              content-length: "%REQ(CONTENT-LENGTH)%"
                              content-type: "%REQ(CONTENT-TYPE)%"
                              host: "%REQ(HOST)%"
                              id: "%REQ(X-REQUEST-ID)%"
                              session-id: "%REQ(SESSION-ID)%"
                              correlation-id: "%REQ(CORRELATION-ID)%"
                              x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                              x_forwarded_proto: "%REQ(X-FORWARDED-PROTO)%"
                              x_envoy_internal: "%REQ(X-ENVOY-INTERNAL)%"
                              x_envoy_decorator_operation: "%REQ(X-ENVOY-DECORATOR-OPERATION)%"
                              x_envoy_expected_rq_timeout_ms: "%REQ(X-ENVOY-EXPECTED-RQ-TIMEOUT-MS)%"
                              x_b3_traceid: "%REQ(X-B3-TRACEID)%"
                              x_b3_parentspanid: "%REQ(X-B3-PARENTSPANID)%"
                              x_b3_spanid: "%REQ(X-B3-SPANID)%"
                              x_b3_sampled: "%REQ(X-B3-SAMPLED)%"
                            method: "%REQ(:METHOD)%"
                            path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          response:
                            body:
                              bytes: "%BYTES_SENT%"
                            duration_resp: "%RESPONSE_DURATION%"
                            duration_tx: "%RESPONSE_TX_DURATION%"
                            flags: "%RESPONSE_FLAGS%"
                            headers:
                              access-control-allow-origin: "%RESP(ACCESS-CONTROL-ALLOW-ORIGIN)%"
                              content-length: "%RESP(CONTENT-LENGTH)%"
                              content-type: "%RESP(CONTENT-TYPE)%"
                              date: "%RESP(DATE)%"
                              server: "%RESP(SERVER)%"
                            status_code: "%RESPONSE_CODE%"
                            status_code_details: "%RESPONSE_CODE_DETAILS%"
                          version: "%PROTOCOL%"
                        log:
                          level: "info"  # default envoy log level
                        network:
                          direction: "inbound"
                        server:
                          address: "%UPSTREAM_HOST%"
                        service:
                          name: "envoy"
                          version: "dev-706fe7871ab5fe631406db1e0fe5af1c4d0eb1b8"
                        user_agent.name: "%REQ(USER-AGENT)%"
  clusters:
    - name: temporal_service
      connect_timeout: 200.0s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: temporal-frontend
                      port_value: 7237
    - name: temporal_service2
      connect_timeout: 200.0s
      type: logical_dns
      http2_protocol_options: { }
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_1
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: temporal-frontend2
                      port_value: 7236
    - name: temporal_service3
      connect_timeout: 200.0s
      type: logical_dns
      http_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_2
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: temporal-frontend
                      port_value: 7244
#    getting ECONNREFUSED with envoy (error code 111) sometimes, so just routing http to one fe service for now
#    - name: temporal_service4
#      connect_timeout: 200.0s
#      type: logical_dns
#      http_protocol_options: {}
#      lb_policy: round_robin
#      load_assignment:
#        cluster_name: cluster_3
#        endpoints:
#          - lb_endpoints:
#              - endpoint:
#                  address:
#                    socket_address:
#                      address: temporal-frontend
#                      port_value: 7245
